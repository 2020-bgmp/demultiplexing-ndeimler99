This is the psuedo code for assignment the first Part 2

For Reference
    4 fastq files one for reach read
        R1 is for read one
        R2 is for index one
        R3 is for index two
        R4 is for read two
    One index reference file 
    8 base pairs long


Code begins here

Shebang

def rev_complement(str):
    '''Determines and returns the reverse compliment of an inputted string'''
    Takes input parameter of string
    reverse input string
    Replaces A with T and C with G and visa versa 
    #example.  INPUT = TCGACGAC / OUTPUT = GTCGTCGA
    return new_str

def open_files():
    '''loops through dictionary and creates/opens all needed files so that files are not being continuously opened and closed as the program runs'''
    -go through dictionary and open two files per barcode (a forward and reverse)
    -open index hopping files
    -open low quality files
    return "Files Opened Succesfully"

def close_files():
    '''closes all files that were opened in open_files()'''
    duplicate of above function but closes all files
    return "files closed succesfully"

def quality_score_check(str):
    '''takes input parameter of a sequence, converts that sequence to phred scores, and returns if the average quality score is above or below a certain threshold'''
    takes input paramter of sequence
    iterate through the sequence creating a running sum of quality scores
    divide sum by length of sequence to determine average
    #example. INPUT = JADEJDE, convert to phred scores = 41 32 35 36 41 35 36, OUTPUT = TRUE (since average is above 20)
    return dividend > 20 (true good, false low) (20 was chosen 1% chance of error)

def write_out(list_one, list_four, indexOne, indexTwo, hopped, quality):
    '''takes records and writes to appropriate file based on barcode, hopped boolean, and quality boolean'''
    take input parameters of each list and the barcodes as well as if they hopped, or if the quality is low
    if quality is false
        output to respective low quality files
    if hopped is true:
        output sequences to hopped output file
    if hopped is false and quality is true 
        open respective file and write out
        file name based on dictionary of key being barcode and value being name of index
    return (will not return anything)

'''Write error correction function if have time'''

def create_dict(index file):
    '''Create a dictionary of all possible permutations of indexes as supplied by file'''
    USE ITERTOOLS TO CREATE A DICTIONARY WITH EVERY PERMUTATION OF INDEXES
        include a low quality key and a N containing key
        other keys will be tuples of index pairs and value will be the number of occurences
    create another dictionary in which the keys are barcodes and value are barcode identifiers to use when writing out
    return both dictionaries

def print_dict(dictionary):
    '''iterates through master dictionary printing barcode combinations and occurences'''
    iterate through dictionary  
        print keys and values that correspond with each dictionary entry
        print the number of hopped indexes and print the number of error indexes

    return nothing

-create int num_hopped
-create int num_low_quality
-create int correct_reads

def parse_files():
    '''this is the meat of the program.  Parses through the files and determines if indexes are matched, mismatched, hopped, etc.'''
    -open all files (use with open)
    -go through each file line by line.
        -store each fastq record (4 lines) for each file simultaneously (four lists of four lines) (or a 2 dimensional list)
            -do this by using modulo and lineCount or small recordCount varaible that resets when you reset lists
        -every four lines (record is complete) analyze lists
            -check to see if indexes contain N
            -check for quality score using quality_score_check()
            -if indexes do not contain N and mean quality score is greater than 20
                -now check to see if indexes hopped
                -if the two indexes are reverse compliments using rev_complement()
                    -output the sequences (read one and four) but modify header line to include barcode - use write_out()
                        -will have to determine reverse compliment of index 2 for header line
                    -barcode will be whichever index appears in dictionary created above 
                        (only forward or reverse compliment will appear in dictionary, not both)
                    -output to file that corresponds to barcode files as appropriate
                    -increment dictionary respective to barcode by one
                    -increment correct_reads by one
                -else index hopping occured
                    -output to files that specify index hopping - use write_out()
                    -there should be two of them one for forward and one for reverse
                    -make sure to add barcodes to header linesn (rev complement index 2)
                    -increment variable hopped
                    -add combination to dictionary
            -else indexes contains N or are low quality
                -output to respective low quality files - use write_out()
                -still include barcodes (rev_complement index 2)
                -increment low quality variable in dictionary
            -empty four lists that are storing the fastq records
    return dictionary that was being incremented






